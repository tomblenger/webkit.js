/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSInternalSettingsGenerated.h"

#include "ExceptionCode.h"
#include "InternalSettingsGenerated.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table for prototype */

static const HashTableValue JSInternalSettingsGeneratedPrototypeTableValues[] =
{
    { "setDOMPasteAllowed", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDOMPasteAllowed), (intptr_t)1 },
    { "setAccelerated2dCanvasEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAccelerated2dCanvasEnabled), (intptr_t)1 },
    { "setAcceleratedCompositedAnimationsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositedAnimationsEnabled), (intptr_t)1 },
    { "setAcceleratedCompositingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingEnabled), (intptr_t)1 },
    { "setAcceleratedCompositingForFixedPositionEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForFixedPositionEnabled), (intptr_t)1 },
    { "setAcceleratedCompositingForOverflowScrollEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForOverflowScrollEnabled), (intptr_t)1 },
    { "setAcceleratedCompositingForScrollableFramesEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForScrollableFramesEnabled), (intptr_t)1 },
    { "setAcceleratedDrawingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedDrawingEnabled), (intptr_t)1 },
    { "setAcceleratedFiltersEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedFiltersEnabled), (intptr_t)1 },
    { "setAllowCustomScrollbarInMainFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowCustomScrollbarInMainFrame), (intptr_t)1 },
    { "setAllowDisplayOfInsecureContent", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowDisplayOfInsecureContent), (intptr_t)1 },
    { "setAllowFileAccessFromFileURLs", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowFileAccessFromFileURLs), (intptr_t)1 },
    { "setAllowMultiElementImplicitSubmission", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowMultiElementImplicitSubmission), (intptr_t)1 },
    { "setAllowRunningOfInsecureContent", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowRunningOfInsecureContent), (intptr_t)1 },
    { "setAllowScriptsToCloseWindows", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowScriptsToCloseWindows), (intptr_t)1 },
    { "setAllowUniversalAccessFromFileURLs", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowUniversalAccessFromFileURLs), (intptr_t)1 },
    { "setAntialiased2dCanvasEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAntialiased2dCanvasEnabled), (intptr_t)1 },
    { "setApplicationChromeMode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetApplicationChromeMode), (intptr_t)1 },
    { "setApplyDeviceScaleFactorInCompositor", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetApplyDeviceScaleFactorInCompositor), (intptr_t)1 },
    { "setAsynchronousSpellCheckingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAsynchronousSpellCheckingEnabled), (intptr_t)1 },
    { "setAuthorAndUserStylesEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAuthorAndUserStylesEnabled), (intptr_t)1 },
    { "setAutoscrollForDragAndDropEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAutoscrollForDragAndDropEnabled), (intptr_t)1 },
    { "setAutostartOriginPlugInSnapshottingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAutostartOriginPlugInSnapshottingEnabled), (intptr_t)1 },
    { "setBackForwardCacheExpirationInterval", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetBackForwardCacheExpirationInterval), (intptr_t)1 },
    { "setBackgroundShouldExtendBeyondPage", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetBackgroundShouldExtendBeyondPage), (intptr_t)1 },
    { "setBackspaceKeyNavigationEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetBackspaceKeyNavigationEnabled), (intptr_t)1 },
    { "setCanvasUsesAcceleratedDrawing", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCanvasUsesAcceleratedDrawing), (intptr_t)1 },
    { "setCaretBrowsingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabled), (intptr_t)1 },
    { "setCompositedScrollingForFramesEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCompositedScrollingForFramesEnabled), (intptr_t)1 },
    { "setCookieEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCookieEnabled), (intptr_t)1 },
    { "setCrossOriginCheckInGetMatchedCSSRulesDisabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCrossOriginCheckInGetMatchedCSSRulesDisabled), (intptr_t)1 },
    { "setCSSGridLayoutEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCSSGridLayoutEnabled), (intptr_t)1 },
    { "setDefaultFixedFontSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFixedFontSize), (intptr_t)1 },
    { "setDefaultFontSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFontSize), (intptr_t)1 },
    { "setDefaultTextEncodingName", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultTextEncodingName), (intptr_t)1 },
    { "setDefaultVideoPosterURL", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultVideoPosterURL), (intptr_t)1 },
    { "setDelegatesPageScaling", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDelegatesPageScaling), (intptr_t)1 },
    { "setDeveloperExtrasEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeveloperExtrasEnabled), (intptr_t)1 },
    { "setDeviceHeight", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeviceHeight), (intptr_t)1 },
    { "setDeviceSupportsMouse", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeviceSupportsMouse), (intptr_t)1 },
    { "setDeviceSupportsTouch", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeviceSupportsTouch), (intptr_t)1 },
    { "setDeviceWidth", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeviceWidth), (intptr_t)1 },
    { "setDiagnosticLoggingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDiagnosticLoggingEnabled), (intptr_t)1 },
    { "setDownloadableBinaryFontsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDownloadableBinaryFontsEnabled), (intptr_t)1 },
    { "setEnforceCSSMIMETypeInNoQuirksMode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetEnforceCSSMIMETypeInNoQuirksMode), (intptr_t)1 },
    { "setExperimentalNotificationsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetExperimentalNotificationsEnabled), (intptr_t)1 },
    { "setFixedElementsLayoutRelativeToFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFixedElementsLayoutRelativeToFrame), (intptr_t)1 },
    { "setFixedPositionCreatesStackingContext", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFixedPositionCreatesStackingContext), (intptr_t)1 },
    { "setForceCompositingMode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceCompositingMode), (intptr_t)1 },
    { "setForceFTPDirectoryListings", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceFTPDirectoryListings), (intptr_t)1 },
    { "setForceSoftwareWebGLRendering", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceSoftwareWebGLRendering), (intptr_t)1 },
    { "setFrameFlatteningEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFrameFlatteningEnabled), (intptr_t)1 },
    { "setFTPDirectoryTemplatePath", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFTPDirectoryTemplatePath), (intptr_t)1 },
    { "setFullScreenEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFullScreenEnabled), (intptr_t)1 },
    { "setHyperlinkAuditingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetHyperlinkAuditingEnabled), (intptr_t)1 },
    { "setIncrementalRenderingSuppressionTimeoutInSeconds", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetIncrementalRenderingSuppressionTimeoutInSeconds), (intptr_t)1 },
    { "setInteractiveFormValidationEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetInteractiveFormValidationEnabled), (intptr_t)1 },
    { "setJavaScriptCanAccessClipboard", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanAccessClipboard), (intptr_t)1 },
    { "setJavaScriptCanOpenWindowsAutomatically", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanOpenWindowsAutomatically), (intptr_t)1 },
    { "setJavaScriptExperimentsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptExperimentsEnabled), (intptr_t)1 },
    { "setLayoutFallbackWidth", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLayoutFallbackWidth), (intptr_t)1 },
    { "setLoadDeferringEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLoadDeferringEnabled), (intptr_t)1 },
    { "setLoadsSiteIconsIgnoringImageLoadingSetting", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLoadsSiteIconsIgnoringImageLoadingSetting), (intptr_t)1 },
    { "setLocalFileContentSniffingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLocalFileContentSniffingEnabled), (intptr_t)1 },
    { "setLocalStorageDatabasePath", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageDatabasePath), (intptr_t)1 },
    { "setLocalStorageEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageEnabled), (intptr_t)1 },
    { "setLogsPageMessagesToSystemConsoleEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLogsPageMessagesToSystemConsoleEnabled), (intptr_t)1 },
    { "setMaximumDecodedImageSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaximumDecodedImageSize), (intptr_t)1 },
    { "setMaximumHTMLParserDOMTreeDepth", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaximumHTMLParserDOMTreeDepth), (intptr_t)1 },
    { "setMaximumPlugInSnapshotAttempts", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaximumPlugInSnapshotAttempts), (intptr_t)1 },
    { "setMediaEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaEnabled), (intptr_t)1 },
    { "setMediaPlaybackAllowsAirPlay", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaPlaybackAllowsAirPlay), (intptr_t)1 },
    { "setMediaPlaybackAllowsInline", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaPlaybackAllowsInline), (intptr_t)1 },
    { "setMediaPlaybackRequiresUserGesture", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaPlaybackRequiresUserGesture), (intptr_t)1 },
    { "setMediaSourceEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaSourceEnabled), (intptr_t)1 },
    { "setMediaStreamEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaStreamEnabled), (intptr_t)1 },
    { "setMinimumAccelerated2dCanvasSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumAccelerated2dCanvasSize), (intptr_t)1 },
    { "setMinimumFontSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumFontSize), (intptr_t)1 },
    { "setMinimumLogicalFontSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumLogicalFontSize), (intptr_t)1 },
    { "setMinimumZoomFontSize", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumZoomFontSize), (intptr_t)1 },
    { "setMultithreadedWebGLEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMultithreadedWebGLEnabled), (intptr_t)1 },
    { "setNeedsIsLoadingInAPISenseQuirk", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNeedsIsLoadingInAPISenseQuirk), (intptr_t)1 },
    { "setNeedsKeyboardEventDisambiguationQuirks", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNeedsKeyboardEventDisambiguationQuirks), (intptr_t)1 },
    { "setNeedsSiteSpecificQuirks", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNeedsSiteSpecificQuirks), (intptr_t)1 },
    { "setNotificationsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNotificationsEnabled), (intptr_t)1 },
    { "setOfflineWebApplicationCacheEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetOfflineWebApplicationCacheEnabled), (intptr_t)1 },
    { "setOpenGLMultisamplingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetOpenGLMultisamplingEnabled), (intptr_t)1 },
    { "setPageCacheSupportsPlugins", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPageCacheSupportsPlugins), (intptr_t)1 },
    { "setPaginateDuringLayoutEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPaginateDuringLayoutEnabled), (intptr_t)1 },
    { "setPasswordEchoDurationInSeconds", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoDurationInSeconds), (intptr_t)1 },
    { "setPasswordEchoEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoEnabled), (intptr_t)1 },
    { "setPlugInSnapshottingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPlugInSnapshottingEnabled), (intptr_t)1 },
    { "setPrimaryPlugInSnapshotDetectionEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPrimaryPlugInSnapshotDetectionEnabled), (intptr_t)1 },
    { "setPrivilegedWebGLExtensionsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPrivilegedWebGLExtensionsEnabled), (intptr_t)1 },
    { "setRegionBasedColumnsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetRegionBasedColumnsEnabled), (intptr_t)1 },
    { "setRequestAnimationFrameEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetRequestAnimationFrameEnabled), (intptr_t)1 },
    { "setScriptMarkupEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScriptMarkupEnabled), (intptr_t)1 },
    { "setScrollAnimatorEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScrollAnimatorEnabled), (intptr_t)1 },
    { "setScrollingCoordinatorEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScrollingCoordinatorEnabled), (intptr_t)1 },
    { "setSelectTrailingWhitespaceEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSelectTrailingWhitespaceEnabled), (intptr_t)1 },
    { "setSelectionIncludesAltImageText", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSelectionIncludesAltImageText), (intptr_t)1 },
    { "setSessionStorageQuota", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSessionStorageQuota), (intptr_t)1 },
    { "setShouldDisplayCaptions", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayCaptions), (intptr_t)1 },
    { "setShouldDisplaySubtitles", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplaySubtitles), (intptr_t)1 },
    { "setShouldDisplayTextDescriptions", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayTextDescriptions), (intptr_t)1 },
    { "setShouldInjectUserScriptsInInitialEmptyDocument", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldInjectUserScriptsInInitialEmptyDocument), (intptr_t)1 },
    { "setShouldPrintBackgrounds", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldPrintBackgrounds), (intptr_t)1 },
    { "setShouldRespectImageOrientation", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldRespectImageOrientation), (intptr_t)1 },
    { "setShowDebugBorders", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowDebugBorders), (intptr_t)1 },
    { "setShowRepaintCounter", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowRepaintCounter), (intptr_t)1 },
    { "setShowsToolTipOverTruncatedText", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowsToolTipOverTruncatedText), (intptr_t)1 },
    { "setShowsURLsInToolTips", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowsURLsInToolTips), (intptr_t)1 },
    { "setShrinksStandaloneImagesToFit", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShrinksStandaloneImagesToFit), (intptr_t)1 },
    { "setSimpleLineLayoutDebugBordersEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutDebugBordersEnabled), (intptr_t)1 },
    { "setSimpleLineLayoutEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutEnabled), (intptr_t)1 },
    { "setSmartInsertDeleteEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSmartInsertDeleteEnabled), (intptr_t)1 },
    { "setSnapshotAllPlugIns", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSnapshotAllPlugIns), (intptr_t)1 },
    { "setSpatialNavigationEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSpatialNavigationEnabled), (intptr_t)1 },
    { "setSupportsMultipleWindows", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSupportsMultipleWindows), (intptr_t)1 },
    { "setSuppressesIncrementalRendering", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSuppressesIncrementalRendering), (intptr_t)1 },
    { "setSyncXHRInDocumentsEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSyncXHRInDocumentsEnabled), (intptr_t)1 },
    { "setTextAreasAreResizable", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTextAreasAreResizable), (intptr_t)1 },
    { "setThreadedHTMLParser", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetThreadedHTMLParser), (intptr_t)1 },
    { "setTouchAdjustmentEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTouchAdjustmentEnabled), (intptr_t)1 },
    { "setTouchDragDropEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTouchDragDropEnabled), (intptr_t)1 },
    { "setTreatsAnyTextCSSLinkAsStylesheet", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTreatsAnyTextCSSLinkAsStylesheet), (intptr_t)1 },
    { "setUnifiedTextCheckerEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUnifiedTextCheckerEnabled), (intptr_t)1 },
    { "setUnsafePluginPastingEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUnsafePluginPastingEnabled), (intptr_t)1 },
    { "setUseLegacyBackgroundSizeShorthandBehavior", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior), (intptr_t)1 },
    { "setUseLegacyTextAlignPositionedElementBehavior", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyTextAlignPositionedElementBehavior), (intptr_t)1 },
    { "setUsePreHTML5ParserQuirks", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUsePreHTML5ParserQuirks), (intptr_t)1 },
    { "setUseThreadedHTMLParserForDataURLs", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseThreadedHTMLParserForDataURLs), (intptr_t)1 },
    { "setUsesDashboardBackwardCompatibilityMode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUsesDashboardBackwardCompatibilityMode), (intptr_t)1 },
    { "setUsesEncodingDetector", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUsesEncodingDetector), (intptr_t)1 },
    { "setValidationMessageTimerMagnification", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetValidationMessageTimerMagnification), (intptr_t)1 },
    { "setWantsBalancedSetDefersLoadingBehavior", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWantsBalancedSetDefersLoadingBehavior), (intptr_t)1 },
    { "setWebArchiveDebugModeEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebArchiveDebugModeEnabled), (intptr_t)1 },
    { "setWebAudioEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebAudioEnabled), (intptr_t)1 },
    { "setWebGLEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebGLEnabled), (intptr_t)1 },
    { "setWebGLErrorsToConsoleEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebGLErrorsToConsoleEnabled), (intptr_t)1 },
    { "setWebSecurityEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebSecurityEnabled), (intptr_t)1 },
    { "setWindowFocusRestricted", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWindowFocusRestricted), (intptr_t)1 },
    { "setXSSAuditorEnabled", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetXSSAuditorEnabled), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSInternalSettingsGeneratedPrototypeTable = { 529, 511, JSInternalSettingsGeneratedPrototypeTableValues, 0 };
const ClassInfo JSInternalSettingsGeneratedPrototype::s_info = { "InternalSettingsGeneratedPrototype", &Base::s_info, &JSInternalSettingsGeneratedPrototypeTable, 0, CREATE_METHOD_TABLE(JSInternalSettingsGeneratedPrototype) };

JSObject* JSInternalSettingsGeneratedPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSInternalSettingsGenerated>(vm, globalObject);
}

bool JSInternalSettingsGeneratedPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSInternalSettingsGeneratedPrototype* thisObject = jsCast<JSInternalSettingsGeneratedPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSInternalSettingsGeneratedPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSInternalSettingsGenerated::s_info = { "InternalSettingsGenerated", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSInternalSettingsGenerated) };

JSInternalSettingsGenerated::JSInternalSettingsGenerated(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<InternalSettingsGenerated> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSInternalSettingsGenerated::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSInternalSettingsGenerated::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSInternalSettingsGeneratedPrototype::create(vm, globalObject, JSInternalSettingsGeneratedPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSInternalSettingsGenerated::destroy(JSC::JSCell* cell)
{
    JSInternalSettingsGenerated* thisObject = static_cast<JSInternalSettingsGenerated*>(cell);
    thisObject->JSInternalSettingsGenerated::~JSInternalSettingsGenerated();
}

JSInternalSettingsGenerated::~JSInternalSettingsGenerated()
{
    releaseImplIfNotNull();
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDOMPasteAllowed(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool DOMPasteAllowed(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDOMPasteAllowed(DOMPasteAllowed);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAccelerated2dCanvasEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool accelerated2dCanvasEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAccelerated2dCanvasEnabled(accelerated2dCanvasEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositedAnimationsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedCompositedAnimationsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositedAnimationsEnabled(acceleratedCompositedAnimationsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedCompositingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingEnabled(acceleratedCompositingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForFixedPositionEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedCompositingForFixedPositionEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingForFixedPositionEnabled(acceleratedCompositingForFixedPositionEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForOverflowScrollEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedCompositingForOverflowScrollEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingForOverflowScrollEnabled(acceleratedCompositingForOverflowScrollEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForScrollableFramesEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedCompositingForScrollableFramesEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingForScrollableFramesEnabled(acceleratedCompositingForScrollableFramesEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedDrawingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedDrawingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedDrawingEnabled(acceleratedDrawingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedFiltersEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool acceleratedFiltersEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedFiltersEnabled(acceleratedFiltersEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowCustomScrollbarInMainFrame(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowCustomScrollbarInMainFrame(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowCustomScrollbarInMainFrame(allowCustomScrollbarInMainFrame);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowDisplayOfInsecureContent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowDisplayOfInsecureContent(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowDisplayOfInsecureContent(allowDisplayOfInsecureContent);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowFileAccessFromFileURLs(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowFileAccessFromFileURLs(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowFileAccessFromFileURLs(allowFileAccessFromFileURLs);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowMultiElementImplicitSubmission(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowMultiElementImplicitSubmission(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowMultiElementImplicitSubmission(allowMultiElementImplicitSubmission);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowRunningOfInsecureContent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowRunningOfInsecureContent(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowRunningOfInsecureContent(allowRunningOfInsecureContent);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowScriptsToCloseWindows(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowScriptsToCloseWindows(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowScriptsToCloseWindows(allowScriptsToCloseWindows);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowUniversalAccessFromFileURLs(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool allowUniversalAccessFromFileURLs(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAllowUniversalAccessFromFileURLs(allowUniversalAccessFromFileURLs);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAntialiased2dCanvasEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool antialiased2dCanvasEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAntialiased2dCanvasEnabled(antialiased2dCanvasEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetApplicationChromeMode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool applicationChromeMode(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setApplicationChromeMode(applicationChromeMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetApplyDeviceScaleFactorInCompositor(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool applyDeviceScaleFactorInCompositor(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setApplyDeviceScaleFactorInCompositor(applyDeviceScaleFactorInCompositor);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAsynchronousSpellCheckingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool asynchronousSpellCheckingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAsynchronousSpellCheckingEnabled(asynchronousSpellCheckingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAuthorAndUserStylesEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool authorAndUserStylesEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAuthorAndUserStylesEnabled(authorAndUserStylesEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAutoscrollForDragAndDropEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool autoscrollForDragAndDropEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAutoscrollForDragAndDropEnabled(autoscrollForDragAndDropEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAutostartOriginPlugInSnapshottingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool autostartOriginPlugInSnapshottingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setAutostartOriginPlugInSnapshottingEnabled(autostartOriginPlugInSnapshottingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackForwardCacheExpirationInterval(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    double backForwardCacheExpirationInterval(exec->argument(0).toNumber(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setBackForwardCacheExpirationInterval(backForwardCacheExpirationInterval);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackgroundShouldExtendBeyondPage(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool backgroundShouldExtendBeyondPage(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setBackgroundShouldExtendBeyondPage(backgroundShouldExtendBeyondPage);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackspaceKeyNavigationEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool backspaceKeyNavigationEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setBackspaceKeyNavigationEnabled(backspaceKeyNavigationEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCanvasUsesAcceleratedDrawing(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool canvasUsesAcceleratedDrawing(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCanvasUsesAcceleratedDrawing(canvasUsesAcceleratedDrawing);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool caretBrowsingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCaretBrowsingEnabled(caretBrowsingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCompositedScrollingForFramesEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool compositedScrollingForFramesEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCompositedScrollingForFramesEnabled(compositedScrollingForFramesEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCookieEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool cookieEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCookieEnabled(cookieEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCrossOriginCheckInGetMatchedCSSRulesDisabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool crossOriginCheckInGetMatchedCSSRulesDisabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCrossOriginCheckInGetMatchedCSSRulesDisabled(crossOriginCheckInGetMatchedCSSRulesDisabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCSSGridLayoutEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool cssGridLayoutEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setCSSGridLayoutEnabled(cssGridLayoutEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFixedFontSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int defaultFixedFontSize(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDefaultFixedFontSize(defaultFixedFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFontSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int defaultFontSize(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDefaultFontSize(defaultFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultTextEncodingName(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& defaultTextEncodingName(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDefaultTextEncodingName(defaultTextEncodingName);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultVideoPosterURL(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& defaultVideoPosterURL(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDefaultVideoPosterURL(defaultVideoPosterURL);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDelegatesPageScaling(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool delegatesPageScaling(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDelegatesPageScaling(delegatesPageScaling);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeveloperExtrasEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool developerExtrasEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDeveloperExtrasEnabled(developerExtrasEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceHeight(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int deviceHeight(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDeviceHeight(deviceHeight);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceSupportsMouse(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool deviceSupportsMouse(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDeviceSupportsMouse(deviceSupportsMouse);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceSupportsTouch(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool deviceSupportsTouch(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDeviceSupportsTouch(deviceSupportsTouch);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceWidth(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int deviceWidth(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDeviceWidth(deviceWidth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDiagnosticLoggingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool diagnosticLoggingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDiagnosticLoggingEnabled(diagnosticLoggingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDownloadableBinaryFontsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool downloadableBinaryFontsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setDownloadableBinaryFontsEnabled(downloadableBinaryFontsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetEnforceCSSMIMETypeInNoQuirksMode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool enforceCSSMIMETypeInNoQuirksMode(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setEnforceCSSMIMETypeInNoQuirksMode(enforceCSSMIMETypeInNoQuirksMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetExperimentalNotificationsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool experimentalNotificationsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setExperimentalNotificationsEnabled(experimentalNotificationsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedElementsLayoutRelativeToFrame(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool fixedElementsLayoutRelativeToFrame(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setFixedElementsLayoutRelativeToFrame(fixedElementsLayoutRelativeToFrame);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedPositionCreatesStackingContext(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool fixedPositionCreatesStackingContext(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setFixedPositionCreatesStackingContext(fixedPositionCreatesStackingContext);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceCompositingMode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool forceCompositingMode(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setForceCompositingMode(forceCompositingMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceFTPDirectoryListings(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool forceFTPDirectoryListings(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setForceFTPDirectoryListings(forceFTPDirectoryListings);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceSoftwareWebGLRendering(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool forceSoftwareWebGLRendering(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setForceSoftwareWebGLRendering(forceSoftwareWebGLRendering);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFrameFlatteningEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool frameFlatteningEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setFrameFlatteningEnabled(frameFlatteningEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFTPDirectoryTemplatePath(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& ftpDirectoryTemplatePath(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setFTPDirectoryTemplatePath(ftpDirectoryTemplatePath);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFullScreenEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool fullScreenEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setFullScreenEnabled(fullScreenEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetHyperlinkAuditingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool hyperlinkAuditingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setHyperlinkAuditingEnabled(hyperlinkAuditingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetIncrementalRenderingSuppressionTimeoutInSeconds(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    double incrementalRenderingSuppressionTimeoutInSeconds(exec->argument(0).toNumber(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setIncrementalRenderingSuppressionTimeoutInSeconds(incrementalRenderingSuppressionTimeoutInSeconds);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInteractiveFormValidationEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool interactiveFormValidationEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setInteractiveFormValidationEnabled(interactiveFormValidationEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanAccessClipboard(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool javaScriptCanAccessClipboard(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanOpenWindowsAutomatically(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool javaScriptCanOpenWindowsAutomatically(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setJavaScriptCanOpenWindowsAutomatically(javaScriptCanOpenWindowsAutomatically);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptExperimentsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool javaScriptExperimentsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setJavaScriptExperimentsEnabled(javaScriptExperimentsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLayoutFallbackWidth(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int layoutFallbackWidth(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLayoutFallbackWidth(layoutFallbackWidth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLoadDeferringEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool loadDeferringEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLoadDeferringEnabled(loadDeferringEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLoadsSiteIconsIgnoringImageLoadingSetting(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool loadsSiteIconsIgnoringImageLoadingSetting(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLoadsSiteIconsIgnoringImageLoadingSetting(loadsSiteIconsIgnoringImageLoadingSetting);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalFileContentSniffingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool localFileContentSniffingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLocalFileContentSniffingEnabled(localFileContentSniffingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageDatabasePath(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& localStorageDatabasePath(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLocalStorageDatabasePath(localStorageDatabasePath);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool localStorageEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLocalStorageEnabled(localStorageEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLogsPageMessagesToSystemConsoleEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool logsPageMessagesToSystemConsoleEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setLogsPageMessagesToSystemConsoleEnabled(logsPageMessagesToSystemConsoleEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumDecodedImageSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned maximumDecodedImageSize(toUInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMaximumDecodedImageSize(maximumDecodedImageSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumHTMLParserDOMTreeDepth(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned maximumHTMLParserDOMTreeDepth(toUInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMaximumHTMLParserDOMTreeDepth(maximumHTMLParserDOMTreeDepth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumPlugInSnapshotAttempts(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned maximumPlugInSnapshotAttempts(toUInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMaximumPlugInSnapshotAttempts(maximumPlugInSnapshotAttempts);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool mediaEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMediaEnabled(mediaEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaPlaybackAllowsAirPlay(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool mediaPlaybackAllowsAirPlay(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMediaPlaybackAllowsAirPlay(mediaPlaybackAllowsAirPlay);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaPlaybackAllowsInline(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool mediaPlaybackAllowsInline(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMediaPlaybackAllowsInline(mediaPlaybackAllowsInline);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaPlaybackRequiresUserGesture(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool mediaPlaybackRequiresUserGesture(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMediaPlaybackRequiresUserGesture(mediaPlaybackRequiresUserGesture);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaSourceEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool mediaSourceEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMediaSourceEnabled(mediaSourceEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaStreamEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool mediaStreamEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMediaStreamEnabled(mediaStreamEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumAccelerated2dCanvasSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int minimumAccelerated2dCanvasSize(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMinimumAccelerated2dCanvasSize(minimumAccelerated2dCanvasSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumFontSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int minimumFontSize(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMinimumFontSize(minimumFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumLogicalFontSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int minimumLogicalFontSize(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMinimumLogicalFontSize(minimumLogicalFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumZoomFontSize(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    float minimumZoomFontSize(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMinimumZoomFontSize(minimumZoomFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMultithreadedWebGLEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool multithreadedWebGLEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setMultithreadedWebGLEnabled(multithreadedWebGLEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsIsLoadingInAPISenseQuirk(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool needsIsLoadingInAPISenseQuirk(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setNeedsIsLoadingInAPISenseQuirk(needsIsLoadingInAPISenseQuirk);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsKeyboardEventDisambiguationQuirks(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool needsKeyboardEventDisambiguationQuirks(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setNeedsKeyboardEventDisambiguationQuirks(needsKeyboardEventDisambiguationQuirks);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsSiteSpecificQuirks(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool needsSiteSpecificQuirks(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setNeedsSiteSpecificQuirks(needsSiteSpecificQuirks);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNotificationsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool notificationsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setNotificationsEnabled(notificationsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetOfflineWebApplicationCacheEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool offlineWebApplicationCacheEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setOfflineWebApplicationCacheEnabled(offlineWebApplicationCacheEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetOpenGLMultisamplingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool openGLMultisamplingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setOpenGLMultisamplingEnabled(openGLMultisamplingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPageCacheSupportsPlugins(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool pageCacheSupportsPlugins(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPageCacheSupportsPlugins(pageCacheSupportsPlugins);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPaginateDuringLayoutEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool paginateDuringLayoutEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPaginateDuringLayoutEnabled(paginateDuringLayoutEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoDurationInSeconds(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    double passwordEchoDurationInSeconds(exec->argument(0).toNumber(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPasswordEchoDurationInSeconds(passwordEchoDurationInSeconds);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool passwordEchoEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPasswordEchoEnabled(passwordEchoEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPlugInSnapshottingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool plugInSnapshottingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPlugInSnapshottingEnabled(plugInSnapshottingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPrimaryPlugInSnapshotDetectionEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool primaryPlugInSnapshotDetectionEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPrimaryPlugInSnapshotDetectionEnabled(primaryPlugInSnapshotDetectionEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPrivilegedWebGLExtensionsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool privilegedWebGLExtensionsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setPrivilegedWebGLExtensionsEnabled(privilegedWebGLExtensionsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRegionBasedColumnsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool regionBasedColumnsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setRegionBasedColumnsEnabled(regionBasedColumnsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRequestAnimationFrameEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool requestAnimationFrameEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setRequestAnimationFrameEnabled(requestAnimationFrameEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScriptMarkupEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool scriptMarkupEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setScriptMarkupEnabled(scriptMarkupEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollAnimatorEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool scrollAnimatorEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setScrollAnimatorEnabled(scrollAnimatorEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollingCoordinatorEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool scrollingCoordinatorEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setScrollingCoordinatorEnabled(scrollingCoordinatorEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSelectTrailingWhitespaceEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool selectTrailingWhitespaceEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSelectTrailingWhitespaceEnabled(selectTrailingWhitespaceEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSelectionIncludesAltImageText(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool selectionIncludesAltImageText(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSelectionIncludesAltImageText(selectionIncludesAltImageText);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSessionStorageQuota(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    unsigned sessionStorageQuota(toUInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSessionStorageQuota(sessionStorageQuota);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayCaptions(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shouldDisplayCaptions(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplayCaptions(shouldDisplayCaptions);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplaySubtitles(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shouldDisplaySubtitles(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplaySubtitles(shouldDisplaySubtitles);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayTextDescriptions(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shouldDisplayTextDescriptions(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplayTextDescriptions(shouldDisplayTextDescriptions);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldInjectUserScriptsInInitialEmptyDocument(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shouldInjectUserScriptsInInitialEmptyDocument(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShouldInjectUserScriptsInInitialEmptyDocument(shouldInjectUserScriptsInInitialEmptyDocument);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldPrintBackgrounds(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shouldPrintBackgrounds(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShouldPrintBackgrounds(shouldPrintBackgrounds);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldRespectImageOrientation(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shouldRespectImageOrientation(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShouldRespectImageOrientation(shouldRespectImageOrientation);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowDebugBorders(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool showDebugBorders(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShowDebugBorders(showDebugBorders);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowRepaintCounter(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool showRepaintCounter(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShowRepaintCounter(showRepaintCounter);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowsToolTipOverTruncatedText(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool showsToolTipOverTruncatedText(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShowsToolTipOverTruncatedText(showsToolTipOverTruncatedText);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowsURLsInToolTips(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool showsURLsInToolTips(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShowsURLsInToolTips(showsURLsInToolTips);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShrinksStandaloneImagesToFit(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool shrinksStandaloneImagesToFit(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setShrinksStandaloneImagesToFit(shrinksStandaloneImagesToFit);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutDebugBordersEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool simpleLineLayoutDebugBordersEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSimpleLineLayoutDebugBordersEnabled(simpleLineLayoutDebugBordersEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool simpleLineLayoutEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSimpleLineLayoutEnabled(simpleLineLayoutEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSmartInsertDeleteEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool smartInsertDeleteEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSmartInsertDeleteEnabled(smartInsertDeleteEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSnapshotAllPlugIns(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool snapshotAllPlugIns(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSnapshotAllPlugIns(snapshotAllPlugIns);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSpatialNavigationEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool spatialNavigationEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSpatialNavigationEnabled(spatialNavigationEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSupportsMultipleWindows(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool supportsMultipleWindows(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSupportsMultipleWindows(supportsMultipleWindows);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSuppressesIncrementalRendering(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool suppressesIncrementalRendering(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSuppressesIncrementalRendering(suppressesIncrementalRendering);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSyncXHRInDocumentsEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool syncXHRInDocumentsEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setSyncXHRInDocumentsEnabled(syncXHRInDocumentsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTextAreasAreResizable(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool textAreasAreResizable(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setTextAreasAreResizable(textAreasAreResizable);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetThreadedHTMLParser(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool threadedHTMLParser(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setThreadedHTMLParser(threadedHTMLParser);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTouchAdjustmentEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool touchAdjustmentEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setTouchAdjustmentEnabled(touchAdjustmentEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTouchDragDropEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool touchDragDropEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setTouchDragDropEnabled(touchDragDropEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTreatsAnyTextCSSLinkAsStylesheet(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool treatsAnyTextCSSLinkAsStylesheet(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setTreatsAnyTextCSSLinkAsStylesheet(treatsAnyTextCSSLinkAsStylesheet);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUnifiedTextCheckerEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool unifiedTextCheckerEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUnifiedTextCheckerEnabled(unifiedTextCheckerEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUnsafePluginPastingEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool unsafePluginPastingEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUnsafePluginPastingEnabled(unsafePluginPastingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool useLegacyBackgroundSizeShorthandBehavior(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUseLegacyBackgroundSizeShorthandBehavior(useLegacyBackgroundSizeShorthandBehavior);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyTextAlignPositionedElementBehavior(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool useLegacyTextAlignPositionedElementBehavior(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUseLegacyTextAlignPositionedElementBehavior(useLegacyTextAlignPositionedElementBehavior);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsePreHTML5ParserQuirks(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool usePreHTML5ParserQuirks(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUsePreHTML5ParserQuirks(usePreHTML5ParserQuirks);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseThreadedHTMLParserForDataURLs(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool useThreadedHTMLParserForDataURLs(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUseThreadedHTMLParserForDataURLs(useThreadedHTMLParserForDataURLs);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsesDashboardBackwardCompatibilityMode(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool usesDashboardBackwardCompatibilityMode(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUsesDashboardBackwardCompatibilityMode(usesDashboardBackwardCompatibilityMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsesEncodingDetector(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool usesEncodingDetector(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setUsesEncodingDetector(usesEncodingDetector);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetValidationMessageTimerMagnification(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int validationMessageTimerMagnification(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setValidationMessageTimerMagnification(validationMessageTimerMagnification);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWantsBalancedSetDefersLoadingBehavior(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool wantsBalancedSetDefersLoadingBehavior(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWantsBalancedSetDefersLoadingBehavior(wantsBalancedSetDefersLoadingBehavior);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebArchiveDebugModeEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool webArchiveDebugModeEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWebArchiveDebugModeEnabled(webArchiveDebugModeEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebAudioEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool webAudioEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWebAudioEnabled(webAudioEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebGLEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool webGLEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWebGLEnabled(webGLEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebGLErrorsToConsoleEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool webGLErrorsToConsoleEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWebGLErrorsToConsoleEnabled(webGLErrorsToConsoleEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebSecurityEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool webSecurityEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWebSecurityEnabled(webSecurityEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWindowFocusRestricted(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool windowFocusRestricted(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setWindowFocusRestricted(windowFocusRestricted);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetXSSAuditorEnabled(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    InternalSettingsGenerated& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    bool xssAuditorEnabled(exec->argument(0).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.setXSSAuditorEnabled(xssAuditorEnabled);
    return JSValue::encode(jsUndefined());
}

bool JSInternalSettingsGeneratedOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSInternalSettingsGeneratedOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSInternalSettingsGenerated* jsInternalSettingsGenerated = jsCast<JSInternalSettingsGenerated*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsInternalSettingsGenerated->impl(), jsInternalSettingsGenerated);
    jsInternalSettingsGenerated->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7InternalSettingsGenerated@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore25InternalSettingsGeneratedE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, InternalSettingsGenerated* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSInternalSettingsGenerated>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7InternalSettingsGenerated@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore25InternalSettingsGeneratedE[2];
#if COMPILER(CLANG)
    // If this fails InternalSettingsGenerated does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(InternalSettingsGenerated), InternalSettingsGenerated_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // InternalSettingsGenerated has subclasses. If InternalSettingsGenerated has subclasses that get passed
    // to toJS() we currently require InternalSettingsGenerated you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<InternalSettingsGenerated>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSInternalSettingsGenerated>(exec, globalObject, impl);
}

InternalSettingsGenerated* toInternalSettingsGenerated(JSC::JSValue value)
{
    return value.inherits(JSInternalSettingsGenerated::info()) ? &jsCast<JSInternalSettingsGenerated*>(value)->impl() : 0;
}

}
