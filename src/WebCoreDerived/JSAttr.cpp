/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSAttr.h"

#include "Attr.h"
#include "Element.h"
#include "JSElement.h"
#include "URL.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSAttrTableValues[] =
{
    { "name", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAttrName), (intptr_t)0 },
    { "specified", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAttrSpecified), (intptr_t)0 },
    { "value", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAttrValue), (intptr_t)setJSAttrValue },
    { "ownerElement", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAttrOwnerElement), (intptr_t)0 },
    { "isId", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAttrIsId), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAttrConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSAttrTable = { 18, 15, JSAttrTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSAttrConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSAttrConstructorTable = { 1, 0, JSAttrConstructorTableValues, 0 };
const ClassInfo JSAttrConstructor::s_info = { "AttrConstructor", &Base::s_info, &JSAttrConstructorTable, 0, CREATE_METHOD_TABLE(JSAttrConstructor) };

JSAttrConstructor::JSAttrConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAttrConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSAttrPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSAttrConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAttrConstructor, JSDOMWrapper>(exec, JSAttrConstructorTable, jsCast<JSAttrConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSAttrPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSAttrPrototypeTable = { 1, 0, JSAttrPrototypeTableValues, 0 };
const ClassInfo JSAttrPrototype::s_info = { "AttrPrototype", &Base::s_info, &JSAttrPrototypeTable, 0, CREATE_METHOD_TABLE(JSAttrPrototype) };

JSObject* JSAttrPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAttr>(vm, globalObject);
}

const ClassInfo JSAttr::s_info = { "Attr", &Base::s_info, &JSAttrTable, 0 , CREATE_METHOD_TABLE(JSAttr) };

JSAttr::JSAttr(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Attr> impl)
    : JSNode(structure, globalObject, impl)
{
}

void JSAttr::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSAttr::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAttrPrototype::create(vm, globalObject, JSAttrPrototype::createStructure(vm, globalObject, JSNodePrototype::self(vm, globalObject)));
}

bool JSAttr::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSAttr* thisObject = jsCast<JSAttr*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSAttr, Base>(exec, JSAttrTable, thisObject, propertyName, slot);
}

EncodedJSValue jsAttrName(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSAttr* castedThis = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    Attr& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.name());
    return JSValue::encode(result);
}


EncodedJSValue jsAttrSpecified(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSAttr* castedThis = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    Attr& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.specified());
    return JSValue::encode(result);
}


EncodedJSValue jsAttrValue(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSAttr* castedThis = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    Attr& impl = castedThis->impl();
    JSValue result = jsStringOrNull(exec, impl.value());
    return JSValue::encode(result);
}


EncodedJSValue jsAttrOwnerElement(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSAttr* castedThis = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    Attr& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.ownerElement()));
    return JSValue::encode(result);
}


EncodedJSValue jsAttrIsId(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSAttr* castedThis = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    Attr& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.isId());
    return JSValue::encode(result);
}


EncodedJSValue jsAttrConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue, PropertyName)
{
    JSAttr* domObject = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    if (!domObject)
        return throwVMTypeError(exec);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSAttr::getConstructor(exec->vm(), domObject->globalObject()));
}

void JSAttr::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSAttr* thisObject = jsCast<JSAttr*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSAttr, Base>(exec, propertyName, value, JSAttrTable, thisObject, slot);
}

void setJSAttrValue(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSAttr* castedThis = jsDynamicCast<JSAttr*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    Attr& impl = castedThis->impl();
    ExceptionCode ec = 0;
    const String& nativeValue(valueToStringWithNullCheck(exec, value));
    if (exec->hadException())
        return;
    impl.setValue(nativeValue, ec);
    setDOMException(exec, ec);
}


JSValue JSAttr::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAttrConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

Attr* toAttr(JSC::JSValue value)
{
    return value.inherits(JSAttr::info()) ? &jsCast<JSAttr*>(value)->impl() : 0;
}

}
