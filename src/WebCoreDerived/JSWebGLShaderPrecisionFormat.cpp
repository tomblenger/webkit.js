/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSWebGLShaderPrecisionFormat.h"

#include "WebGLShaderPrecisionFormat.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSWebGLShaderPrecisionFormatTableValues[] =
{
    { "rangeMin", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatRangeMin), (intptr_t)0 },
    { "rangeMax", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatRangeMax), (intptr_t)0 },
    { "precision", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatPrecision), (intptr_t)0 },
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatConstructor), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebGLShaderPrecisionFormatTable = { 9, 7, JSWebGLShaderPrecisionFormatTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSWebGLShaderPrecisionFormatConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebGLShaderPrecisionFormatConstructorTable = { 1, 0, JSWebGLShaderPrecisionFormatConstructorTableValues, 0 };
const ClassInfo JSWebGLShaderPrecisionFormatConstructor::s_info = { "WebGLShaderPrecisionFormatConstructor", &Base::s_info, &JSWebGLShaderPrecisionFormatConstructorTable, 0, CREATE_METHOD_TABLE(JSWebGLShaderPrecisionFormatConstructor) };

JSWebGLShaderPrecisionFormatConstructor::JSWebGLShaderPrecisionFormatConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSWebGLShaderPrecisionFormatConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, JSWebGLShaderPrecisionFormatPrototype::self(vm, globalObject), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSWebGLShaderPrecisionFormatConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSWebGLShaderPrecisionFormatConstructor, JSDOMWrapper>(exec, JSWebGLShaderPrecisionFormatConstructorTable, jsCast<JSWebGLShaderPrecisionFormatConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSWebGLShaderPrecisionFormatPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSWebGLShaderPrecisionFormatPrototypeTable = { 1, 0, JSWebGLShaderPrecisionFormatPrototypeTableValues, 0 };
const ClassInfo JSWebGLShaderPrecisionFormatPrototype::s_info = { "WebGLShaderPrecisionFormatPrototype", &Base::s_info, &JSWebGLShaderPrecisionFormatPrototypeTable, 0, CREATE_METHOD_TABLE(JSWebGLShaderPrecisionFormatPrototype) };

JSObject* JSWebGLShaderPrecisionFormatPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebGLShaderPrecisionFormat>(vm, globalObject);
}

const ClassInfo JSWebGLShaderPrecisionFormat::s_info = { "WebGLShaderPrecisionFormat", &Base::s_info, &JSWebGLShaderPrecisionFormatTable, 0 , CREATE_METHOD_TABLE(JSWebGLShaderPrecisionFormat) };

JSWebGLShaderPrecisionFormat::JSWebGLShaderPrecisionFormat(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebGLShaderPrecisionFormat> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSWebGLShaderPrecisionFormat::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSWebGLShaderPrecisionFormat::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebGLShaderPrecisionFormatPrototype::create(vm, globalObject, JSWebGLShaderPrecisionFormatPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSWebGLShaderPrecisionFormat::destroy(JSC::JSCell* cell)
{
    JSWebGLShaderPrecisionFormat* thisObject = static_cast<JSWebGLShaderPrecisionFormat*>(cell);
    thisObject->JSWebGLShaderPrecisionFormat::~JSWebGLShaderPrecisionFormat();
}

JSWebGLShaderPrecisionFormat::~JSWebGLShaderPrecisionFormat()
{
    releaseImplIfNotNull();
}

bool JSWebGLShaderPrecisionFormat::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWebGLShaderPrecisionFormat* thisObject = jsCast<JSWebGLShaderPrecisionFormat*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSWebGLShaderPrecisionFormat, Base>(exec, JSWebGLShaderPrecisionFormatTable, thisObject, propertyName, slot);
}

EncodedJSValue jsWebGLShaderPrecisionFormatRangeMin(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSWebGLShaderPrecisionFormat* castedThis = jsDynamicCast<JSWebGLShaderPrecisionFormat*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    WebGLShaderPrecisionFormat& impl = castedThis->impl();
    JSValue result = jsNumber(impl.rangeMin());
    return JSValue::encode(result);
}


EncodedJSValue jsWebGLShaderPrecisionFormatRangeMax(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSWebGLShaderPrecisionFormat* castedThis = jsDynamicCast<JSWebGLShaderPrecisionFormat*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    WebGLShaderPrecisionFormat& impl = castedThis->impl();
    JSValue result = jsNumber(impl.rangeMax());
    return JSValue::encode(result);
}


EncodedJSValue jsWebGLShaderPrecisionFormatPrecision(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSWebGLShaderPrecisionFormat* castedThis = jsDynamicCast<JSWebGLShaderPrecisionFormat*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    WebGLShaderPrecisionFormat& impl = castedThis->impl();
    JSValue result = jsNumber(impl.precision());
    return JSValue::encode(result);
}


EncodedJSValue jsWebGLShaderPrecisionFormatConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue, PropertyName)
{
    JSWebGLShaderPrecisionFormat* domObject = jsDynamicCast<JSWebGLShaderPrecisionFormat*>(JSValue::decode(thisValue));
    if (!domObject)
        return throwVMTypeError(exec);
    if (!domObject)
        return throwVMTypeError(exec);
    return JSValue::encode(JSWebGLShaderPrecisionFormat::getConstructor(exec->vm(), domObject->globalObject()));
}

JSValue JSWebGLShaderPrecisionFormat::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebGLShaderPrecisionFormatConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

bool JSWebGLShaderPrecisionFormatOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebGLShaderPrecisionFormatOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSWebGLShaderPrecisionFormat* jsWebGLShaderPrecisionFormat = jsCast<JSWebGLShaderPrecisionFormat*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebGLShaderPrecisionFormat->impl(), jsWebGLShaderPrecisionFormat);
    jsWebGLShaderPrecisionFormat->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, WebGLShaderPrecisionFormat* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSWebGLShaderPrecisionFormat>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to WebGLShaderPrecisionFormat.
    COMPILE_ASSERT(!__is_polymorphic(WebGLShaderPrecisionFormat), WebGLShaderPrecisionFormat_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<WebGLShaderPrecisionFormat>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSWebGLShaderPrecisionFormat>(exec, globalObject, impl);
}

WebGLShaderPrecisionFormat* toWebGLShaderPrecisionFormat(JSC::JSValue value)
{
    return value.inherits(JSWebGLShaderPrecisionFormat::info()) ? &jsCast<JSWebGLShaderPrecisionFormat*>(value)->impl() : 0;
}

}

#endif // ENABLE(WEBGL)
